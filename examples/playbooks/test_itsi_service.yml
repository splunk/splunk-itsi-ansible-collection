---
# Comprehensive test suite for itsi_service module
# Tests all functionality: CRUD operations, change detection, idempotency, error handling
- name: Comprehensive ITSI Service Module Test Suite
  hosts: all
  gather_facts: false

  vars:
    test_prefix: "comprehensive-test"
    test_timestamp: "{{ ansible_date_time.epoch | default('12345') }}"
    base_service_name: "{{ test_prefix }}-{{ test_timestamp }}"

    # Test data for various scenarios
    test_services:
      minimal:
        name: "{{ base_service_name }}-minimal"
      full:
        name: "{{ base_service_name }}-full"
        enabled: true
        description: "Comprehensive test service with all fields"
        sec_grp: "default_itsi_security_group"
        base_service_template_id: ""
        service_tags:
          tags: ["test", "automation", "comprehensive"]
          template_tags: ["validation", "ci"]
        entity_rules:
          - rule_condition: "AND"
            rule_items:
              - field: "host"
                field_type: "alias"
                value: "test-host"
                rule_type: "matches"
      update_test:
        name: "{{ base_service_name }}-update"
        enabled: false
        description: "Initial description for update testing"

  tasks:
    # =============================================================================
    # SETUP AND CLEANUP
    # =============================================================================

    - name: "üßπ SETUP: Clean up any existing test services"
      splunk.itsi.itsi_service:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ test_services.minimal.name }}"
        - "{{ test_services.full.name }}"
        - "{{ test_services.update_test.name }}"
        - "{{ base_service_name }}-extra"  # For TEST 8 extra fields
        - { name: "{{ base_service_name }}-multifield" }
        - { name: "{{ base_service_name }}-nonexistent" }
        - { name: "{{ base_service_name }}-key-test" }
      failed_when: false
      tags: [setup, cleanup]

    - name: "‚è±Ô∏è PAUSE: Allow cleanup to complete"
      ansible.builtin.pause:
        seconds: 1

    # =============================================================================
    # TEST 1: BASIC CREATE OPERATIONS
    # =============================================================================

    - name: "üìù TEST 1.1: CREATE - Minimal service (name only)"
      splunk.itsi.itsi_service:
        name: "{{ test_services.minimal.name }}"
        state: present
      register: create_minimal

    - name: "‚úÖ VERIFY 1.1: Minimal service creation"
      ansible.builtin.assert:
        that:
          - create_minimal.status == 200
          - create_minimal.changed == true
          - "'title' in create_minimal.changed_fields"
          - "create_minimal.service._key is defined"
        fail_msg: "Minimal service creation failed"
        success_msg: "‚úÖ Minimal service created successfully"

    - name: "üìù TEST 1.2: CREATE - Full service (all fields)"
      splunk.itsi.itsi_service:
        name: "{{ test_services.full.name }}"
        enabled: "{{ test_services.full.enabled }}"
        description: "{{ test_services.full.description }}"
        sec_grp: "{{ test_services.full.sec_grp }}"
        base_service_template_id: "{{ test_services.full.base_service_template_id }}"
        service_tags: "{{ test_services.full.service_tags }}"
        entity_rules: "{{ test_services.full.entity_rules }}"
        state: present
      register: create_full

    - name: "‚úÖ VERIFY 1.2: Full service creation"
      ansible.builtin.assert:
        that:
          - create_full.status == 200
          - create_full.changed == true
          - "'title' in create_full.changed_fields"
          - "'enabled' in create_full.changed_fields"
          - "'description' in create_full.changed_fields"
          - "'service_tags' in create_full.changed_fields"
          - "'entity_rules' in create_full.changed_fields"
          - "create_full.service._key is defined"
        fail_msg: "Full service creation failed"
        success_msg: "‚úÖ Full service created successfully"

    # =============================================================================
    # TEST 2: IDEMPOTENCY TESTING
    # =============================================================================

    - name: "üîÑ TEST 2.1: IDEMPOTENT - Repeat minimal service creation"
      splunk.itsi.itsi_service:
        name: "{{ test_services.minimal.name }}"
        state: present
      register: idempotent_minimal

    - name: "‚úÖ VERIFY 2.1: Minimal service idempotency"
      ansible.builtin.assert:
        that:
          - idempotent_minimal.status == 200
          - idempotent_minimal.changed == false
          - "idempotent_minimal.changed_fields == []"
        fail_msg: "Minimal service idempotency failed"
        success_msg: "‚úÖ Minimal service idempotency verified"

    - name: "üîÑ TEST 2.2: IDEMPOTENT - Repeat full service creation"
      splunk.itsi.itsi_service:
        name: "{{ test_services.full.name }}"
        enabled: "{{ test_services.full.enabled }}"
        description: "{{ test_services.full.description }}"
        sec_grp: "{{ test_services.full.sec_grp }}"
        base_service_template_id: "{{ test_services.full.base_service_template_id }}"
        service_tags:
          tags: ["test", "automation", "comprehensive"]  # Same order
          template_tags: ["validation", "ci"]
        entity_rules: "{{ test_services.full.entity_rules }}"
        state: present
      register: idempotent_full

    - name: "‚úÖ VERIFY 2.2: Full service idempotency"
      ansible.builtin.assert:
        that:
          - idempotent_full.status == 200
          - idempotent_full.changed == false
          - "idempotent_full.changed_fields == []"
        fail_msg: "Full service idempotency failed"
        success_msg: "‚úÖ Full service idempotency verified"

    # =============================================================================
    # TEST 3: UPDATE OPERATIONS AND CHANGE DETECTION
    # =============================================================================

    - name: "üìù TEST 3.1: CREATE - Service for update testing"
      splunk.itsi.itsi_service:
        name: "{{ test_services.update_test.name }}"
        enabled: "{{ test_services.update_test.enabled }}"
        description: "{{ test_services.update_test.description }}"
        state: present
      register: create_for_update

    - name: "üìù TEST 3.2: UPDATE - Single field (description)"
      splunk.itsi.itsi_service:
        name: "{{ test_services.update_test.name }}"
        # Don't explicitly set enabled to test only description change
        description: "UPDATED - Single field change test"
        state: present
      register: update_description

    - name: "‚úÖ VERIFY 3.2: Single field update"
      ansible.builtin.assert:
        that:
          - update_description.status == 200
          - update_description.changed == true
          - "update_description.changed_fields == ['description']"
        fail_msg: "Single field update failed"
        success_msg: "‚úÖ Single field update successful"

    - name: "üìù TEST 3.3: CREATE - Fresh service for multiple field testing"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-multifield"
        enabled: false
        description: "Initial state for multiple field test"
        state: present
      register: create_multifield

    - name: "üìù TEST 3.4: UPDATE - Multiple fields"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-multifield"
        enabled: true  # Changed from false
        description: "UPDATED - Multiple fields changed"  # Changed again
        service_tags:
          tags: ["updated", "multi-field"]
          template_tags: ["test"]
        state: present
      register: update_multiple

    - name: "üîç DEBUG 3.4: Show update_multiple details"
      ansible.builtin.debug:
        msg:
          - "Status: {{ update_multiple.status }}"
          - "Changed: {{ update_multiple.changed }}"
          - "Changed fields: {{ update_multiple.changed_fields }}"
          - "Expected fields: ['enabled', 'description', 'service_tags']"

    - name: "‚úÖ VERIFY 3.4: Multiple field update"
      ansible.builtin.assert:
        that:
          - update_multiple.status == 200
          - update_multiple.changed == true
          - "'enabled' in update_multiple.changed_fields"
          - "'description' in update_multiple.changed_fields"
          - "'service_tags' in update_multiple.changed_fields"
        fail_msg: "Multiple field update failed - see debug above"
        success_msg: "‚úÖ Multiple field update successful"

    - name: "üìù TEST 3.5: UPDATE - Entity rules change"
      splunk.itsi.itsi_service:
        name: "{{ test_services.update_test.name }}"
        entity_rules:
          - rule_condition: "OR"
            rule_items:
              - field: "source"
                field_type: "alias"
                value: "test-source"
                rule_type: "matches"
              - field: "sourcetype"
                field_type: "alias"
                value: "test-sourcetype"
                rule_type: "matches"
        state: present
      register: update_entity_rules

    - name: "üîç DEBUG 3.5: Show entity rules update details"
      ansible.builtin.debug:
        msg:
          - "Status: {{ update_entity_rules.status }}"
          - "Changed: {{ update_entity_rules.changed }}"
          - "Changed fields: {{ update_entity_rules.changed_fields }}"
          - "Changed fields length: {{ update_entity_rules.changed_fields | length }}"

    - name: "‚úÖ VERIFY 3.5: Entity rules update"
      ansible.builtin.assert:
        that:
          - update_entity_rules.status == 200
          - update_entity_rules.changed == true
          - "'entity_rules' in update_entity_rules.changed_fields"
          - "update_entity_rules.changed_fields | length == 1"
        fail_msg: "Entity rules update failed - see debug above"
        success_msg: "‚úÖ Entity rules update successful"

    # =============================================================================
    # TEST 4: SERVICE KEY OPERATIONS
    # =============================================================================

    - name: "üìù TEST 4.1: CREATE - Service to test key-based operations"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-key-test"
        description: "Service for key-based testing"
        enabled: true
        state: present
      register: create_for_key_test

    - name: "üìù TEST 4.2: UPDATE - By service key instead of name"
      splunk.itsi.itsi_service:
        service_key: "{{ create_for_key_test.service._key }}"
        description: "UPDATED via service key"
        enabled: false
        state: present
      register: update_by_key

    - name: "‚úÖ VERIFY 4.2: Update by service key"
      ansible.builtin.assert:
        that:
          - update_by_key.status == 200
          - update_by_key.changed == true
          - "'description' in update_by_key.changed_fields"
          - "'enabled' in update_by_key.changed_fields"
        fail_msg: "Update by service key failed"
        success_msg: "‚úÖ Update by service key successful"

    # =============================================================================
    # TEST 5: DELETE OPERATIONS
    # =============================================================================

    - name: "üóëÔ∏è TEST 5.1: DELETE - Service by name"
      splunk.itsi.itsi_service:
        name: "{{ test_services.minimal.name }}"
        state: absent
      register: delete_by_name

    - name: "‚úÖ VERIFY 5.1: Delete by name"
      ansible.builtin.assert:
        that:
          - delete_by_name.status == 204  # DELETE operations return 204 No Content
          - delete_by_name.changed == true
          - "'_deleted' in delete_by_name.changed_fields"
          - "delete_by_name.service is none"
        fail_msg: "Delete by name failed"
        success_msg: "‚úÖ Delete by name successful"

    - name: "üóëÔ∏è TEST 5.2: DELETE - Service by key"
      splunk.itsi.itsi_service:
        service_key: "{{ create_for_key_test.service._key }}"
        state: absent
      register: delete_by_key

    - name: "‚úÖ VERIFY 5.2: Delete by key"
      ansible.builtin.assert:
        that:
          - delete_by_key.status == 204  # DELETE operations return 204 No Content
          - delete_by_key.changed == true
          - "'_deleted' in delete_by_key.changed_fields"
        fail_msg: "Delete by key failed"
        success_msg: "‚úÖ Delete by key successful"

    - name: "üîÑ TEST 5.3: DELETE - Idempotent delete (already deleted)"
      splunk.itsi.itsi_service:
        name: "{{ test_services.minimal.name }}"
        state: absent
      register: delete_idempotent

    - name: "‚úÖ VERIFY 5.3: Idempotent delete"
      ansible.builtin.assert:
        that:
          - delete_idempotent.status in [200, 204]  # DELETE: 204 for actual delete, 200 for idempotent
          - delete_idempotent.changed == false
          - "delete_idempotent.changed_fields == []"
        fail_msg: "Idempotent delete failed"
        success_msg: "‚úÖ Idempotent delete successful"

    # =============================================================================
    # TEST 6: ERROR HANDLING AND EDGE CASES
    # =============================================================================

    - name: "‚ö†Ô∏è TEST 6.1: ERROR - Delete non-existent service"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-nonexistent"
        state: absent
      register: delete_nonexistent

    - name: "‚úÖ VERIFY 6.1: Delete non-existent service handling"
      ansible.builtin.assert:
        that:
          - delete_nonexistent.changed == false
          - "delete_nonexistent.changed_fields == []"
        fail_msg: "Delete non-existent service handling failed"
        success_msg: "‚úÖ Delete non-existent service handled correctly"

    - name: "‚ö†Ô∏è TEST 6.2: ERROR - Create without name or service_key"
      splunk.itsi.itsi_service:
        description: "Service without name or key"
        state: present
      register: create_without_identifier
      failed_when: false

    - name: "‚úÖ VERIFY 6.2: Create without identifier error handling"
      ansible.builtin.assert:
        that:
          - "'one of the following is required' in create_without_identifier.msg"
        fail_msg: "Create without identifier should show validation error"
        success_msg: "‚úÖ Create without identifier correctly rejected"

    # =============================================================================
    # TEST 7: CHECK MODE TESTING
    # =============================================================================

    - name: "üîç TEST 7.1: CHECK MODE - Create operation"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-check-mode"
        description: "Check mode test service"
        enabled: true
        state: present
      check_mode: true
      register: check_mode_create

    - name: "‚úÖ VERIFY 7.1: Check mode create"
      ansible.builtin.assert:
        that:
          - check_mode_create.changed == true
          - "check_mode_create.diff.before == {}"
          - "'title' in check_mode_create.diff.after"
          - "'description' in check_mode_create.diff.after"
          - "'enabled' in check_mode_create.diff.after"
        fail_msg: "Check mode create failed"
        success_msg: "‚úÖ Check mode create successful"

    - name: "üîç TEST 7.2: CHECK MODE - Update operation"
      splunk.itsi.itsi_service:
        name: "{{ test_services.full.name }}"
        description: "CHECK MODE - Updated description"
        enabled: false  # Changed from true
        state: present
      check_mode: true
      register: check_mode_update

    - name: "‚úÖ VERIFY 7.2: Check mode update"
      ansible.builtin.assert:
        that:
          - check_mode_update.changed == true
          - "'description' in check_mode_update.changed_fields"
          - "'enabled' in check_mode_update.changed_fields"
          - "check_mode_update.diff.before is defined"
          - "check_mode_update.diff.after is defined"
        fail_msg: "Check mode update failed"
        success_msg: "‚úÖ Check mode update successful"

    - name: "üîç TEST 7.3: CHECK MODE - Delete operation"
      splunk.itsi.itsi_service:
        name: "{{ test_services.full.name }}"
        state: absent
      check_mode: true
      register: check_mode_delete

    - name: "‚úÖ VERIFY 7.3: Check mode delete"
      ansible.builtin.assert:
        that:
          - check_mode_delete.changed == true
          - "check_mode_delete.diff.before is defined"
          - "check_mode_delete.diff.after == {}"
        fail_msg: "Check mode delete failed"
        success_msg: "‚úÖ Check mode delete successful"

    # =============================================================================
    # TEST 8: EXTRA FIELDS FUNCTIONALITY
    # =============================================================================

    - name: "üìù TEST 8.1: CREATE - Service with extra fields"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-extra"
        description: "Service with extra fields"
        extra:
          custom_field_1: "custom_value_1"
          custom_field_2: 42
          custom_field_3: true
        state: present
      register: create_with_extra

    - name: "‚úÖ VERIFY 8.1: Create with extra fields"
      ansible.builtin.assert:
        that:
          - create_with_extra.status == 200
          - create_with_extra.changed == true
          - "'custom_field_1' in create_with_extra.changed_fields"
          - "'custom_field_2' in create_with_extra.changed_fields"
          - "'custom_field_3' in create_with_extra.changed_fields"
        fail_msg: "Create with extra fields failed"
        success_msg: "‚úÖ Create with extra fields successful"

    - name: "üìù TEST 8.2: UPDATE - Modify extra fields"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-extra"
        description: "Service with extra fields"
        extra:
          custom_field_1: "updated_value_1"  # Changed
          custom_field_2: 42                 # Unchanged
          custom_field_4: "new_field"        # New
        state: present
      register: update_extra_fields

    - name: "üîç DEBUG 8.2: Show extra fields update details"
      ansible.builtin.debug:
        msg:
          - "Status: {{ update_extra_fields.status }}"
          - "Changed: {{ update_extra_fields.changed }}"
          - "Changed fields: {{ update_extra_fields.changed_fields }}"

    - name: "‚úÖ VERIFY 8.2: Update extra fields"
      ansible.builtin.assert:
        that:
          - update_extra_fields.status == 200
          - update_extra_fields.changed == true
          - "'custom_field_1' in update_extra_fields.changed_fields"
          - "'custom_field_4' in update_extra_fields.changed_fields"
          - "'custom_field_3' in update_extra_fields.changed_fields"  # Removed field
        fail_msg: "Update extra fields failed"
        success_msg: "‚úÖ Update extra fields successful"

    # =============================================================================
    # TEST 9: SERVICE TAGS EDGE CASES
    # =============================================================================

    - name: "üìù TEST 9.1: CREATE - Service with empty service_tags"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-empty-tags"
        service_tags:
          tags: []
          template_tags: []
        state: present
      register: create_empty_tags

    - name: "üìù TEST 9.2: UPDATE - Add tags to empty service_tags"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-empty-tags"
        service_tags:
          tags: ["new-tag"]
          template_tags: ["new-template-tag"]
        state: present
      register: update_add_tags

    - name: "‚úÖ VERIFY 9.2: Add tags to empty service_tags"
      ansible.builtin.assert:
        that:
          - update_add_tags.changed == true
          - "'service_tags' in update_add_tags.changed_fields"
        fail_msg: "Add tags to empty service_tags failed"
        success_msg: "‚úÖ Add tags to empty service_tags successful"

    - name: "üìù TEST 9.3: UPDATE - Remove all tags"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-empty-tags"
        service_tags:
          tags: []
          template_tags: []
        state: present
      register: update_remove_tags

    - name: "‚úÖ VERIFY 9.3: Remove all tags"
      ansible.builtin.assert:
        that:
          - update_remove_tags.changed == true
          - "'service_tags' in update_remove_tags.changed_fields"
        fail_msg: "Remove all tags failed"
        success_msg: "‚úÖ Remove all tags successful"

    # =============================================================================
    # TEST 10: BOOLEAN AND NUMERIC HANDLING
    # =============================================================================

    - name: "üìù TEST 10.1: CREATE - Service with enabled=false"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-bool-test"
        enabled: false
        state: present
      register: create_disabled

    - name: "üìù TEST 10.2: UPDATE - Toggle enabled false -> true"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-bool-test"
        enabled: true
        state: present
      register: update_enable

    - name: "‚úÖ VERIFY 10.2: Toggle enabled false -> true"
      ansible.builtin.assert:
        that:
          - update_enable.changed == true
          - "'enabled' in update_enable.changed_fields"
          - "update_enable.changed_fields | length == 1"
        fail_msg: "Toggle enabled false -> true failed"
        success_msg: "‚úÖ Toggle enabled false -> true successful"

    - name: "üìù TEST 10.3: UPDATE - Test numeric 1/0 vs boolean true/false"
      splunk.itsi.itsi_service:
        name: "{{ base_service_name }}-bool-test"
        enabled: 1  # Should be equivalent to true
        state: present
      register: update_numeric_enabled

    - name: "‚úÖ VERIFY 10.3: Numeric 1 equivalent to boolean true"
      ansible.builtin.assert:
        that:
          - update_numeric_enabled.changed == false
          - "update_numeric_enabled.changed_fields == []"
        fail_msg: "Numeric 1 not equivalent to boolean true"
        success_msg: "‚úÖ Numeric 1 correctly equivalent to boolean true"

    # =============================================================================
    # FINAL SUMMARY AND CLEANUP
    # =============================================================================

    - name: "üìä TEST SUMMARY"
      ansible.builtin.debug:
        msg:
          - "üéâ ===== ITSI SERVICE MODULE COMPREHENSIVE TEST RESULTS ====="
          - "‚úÖ CREATE Operations: Minimal, Full, With Extra Fields"
          - "‚úÖ UPDATE Operations: Single Field, Multiple Fields, Entity Rules"
          - "‚úÖ DELETE Operations: By Name, By Key, Idempotent Delete"
          - "‚úÖ IDEMPOTENCY: All operations properly detect no-change scenarios"
          - "‚úÖ CHECK MODE: Proper diff reporting without actual changes"
          - "‚úÖ ERROR HANDLING: Graceful handling of edge cases"
          - "‚úÖ SERVICE_TAGS: Empty tags, add/remove operations"
          - "‚úÖ BOOLEAN HANDLING: True/false and 1/0 equivalence"
          - "‚úÖ SERVICE KEY: Operations using key instead of name"
          - "‚úÖ EXTRA FIELDS: Custom field management"
          - ""
          - "üöÄ ALL TESTS COMPLETED SUCCESSFULLY!"
          - "üìà Total Test Categories: 10"
          - "üîç Change Detection: VERIFIED"
          - "üéØ HTTP Status Codes: All 200 (Success)"

    - name: "üßπ FINAL CLEANUP: Remove all test services"
      splunk.itsi.itsi_service:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ test_services.full.name }}"
        - "{{ test_services.update_test.name }}"
        - "{{ base_service_name }}-extra"
        - "{{ base_service_name }}-empty-tags"
        - "{{ base_service_name }}-bool-test"
      failed_when: false
      tags: [cleanup]
